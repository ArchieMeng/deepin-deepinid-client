/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp com.deepin.deepinid.xml -p deepinid_interface -c DeepinIDInterface -l DbusExtendedAbstractInterface -N
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DEEPINID_INTERFACE_H
#define DEEPINID_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>


typedef QVariantMap UserInfo;
Q_DECLARE_METATYPE(UserInfo)

//typedef QVariantList Hardware;
//Q_DECLARE_METATYPE(Hardware)

/*
 * Proxy class for interface com.deepin.deepinid
 */
class DeepinIDInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.deepinid"; }

public:
    DeepinIDInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~DeepinIDInterface();

    Q_PROPERTY(QString HardwareID READ hardwareID)
    inline QString hardwareID() const
    { return qvariant_cast< QString >(property("HardwareID")); }

    Q_PROPERTY(UserInfo UserInfo READ userInfo)
    inline UserInfo userInfo() const
    { return qvariant_cast< UserInfo >(property("UserInfo")); }

public Q_SLOTS: // METHODS
//    inline QDBusPendingReply<Hardware> GetHardware()
//    {
//        QList<QVariant> argumentList;
//        return asyncCallWithArgumentList(QStringLiteral("GetHardware"), argumentList);
//    }

    inline QDBusPendingReply<> Login()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Login"), argumentList);
    }

    inline QDBusPendingReply<> Logout()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Logout"), argumentList);
    }

    inline QDBusPendingReply<> SetToken(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetToken"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

#endif
